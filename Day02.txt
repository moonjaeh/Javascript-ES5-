1. 메소드(함수)
    - 메소드는 특정 동작을 정의하는 기능
    - function 메소드명(매개변수) {
        실행문;
        return;(필수 아님)
      }

2. return
  - 데이터를 반환하거나 메소드를 종료
  - 데이터를 반환할 때는 return 반환값;
  - 메소드를 종료할 때는 return;

3. 지역변수와 전역변수
  - 전역변수는 script 태그안에서 어디서든지 접근가능한 변수
    <script>
      var num;
    </script>
  - 지역변수는 메소드 안에 선언된 변수
    메소드 안에서만 사용 가능
    function add() {
      var i;
    }

4. 함수의 호이스팅
  - 함수의 호이스팅이란 함수가 어느 위치에 선언되어 있던간에 
    호출하여 사용할 수 있는 기능

5. 익명함수
  - 이름이 없는 함수
    var 변수명 = function() {
      
    }
  - 익명함수는 호이스팅이 되지 않음

6. 즉시 실행 함수
  - 함수의 정의와 동시에 실행되는 함수
  - (function(매개변수) {

    })(매개변수에 들어갈 값);

7. 지역함수와 전역함수
  - 전역함수는 script 태그안에서 선언된 함수로 
    어디서든지 접근 가능
  - 지역함수는 함수안에 선언된 함수로 함수내에서만 사용 가능

8. 사용자 정의 객체
  - ES5에는 class라는 개념이 없다.
  - var ob = new Object();
    var ob = {
      name: 'aaa',
      tel: '010-0000-000',
      obInfo: function() {
        console.log(this.name);
      }
    };
  - 객체명.속성이름;
    객체명.메소드이름();

9. 사용자 정의 생성자 함수
  - 객체를 선언하지 않고 생성자 함수를 통해서 초기화된 객체를 호출할 수 있다.
  - function 객체명(매개변수) {
      초기화;
    }
  - var 변수명 = new 생성자함수(초기화값);

10. prototype
  - 자바스크립트는 prototype 기반의 객체지향 언어다
  - 모든 객체는 prototype을 상속받는다.
  - 자바스크립트의 함수는 prototype 상속받은 객체의 일부
  - 공통된 메소드를 prototype에 등록하여 사용하면
    메소드가 메모리에 한 번만 올라가기 때문에 
    메모리 낭비를 줄일 수 있다.

11. 마우스 이벤트
  - onclick : 클릭 시 취하는 동작
  - ondblclick : 더블 클릭 시 취하는 동작
  - onmouseover : 마우스 커서가 요소에 올라갔을 때 취하는 동작
  - onmouseout : 마우스 커서가 요소에서 빠져나갔을 때 취하는 동작

12. 키보드 이벤트
  - onkeypress : 지정한 요소에서 키보드가 눌렸을 때 취하는 동작(ALT, CTRL, SHIFT, 방향 키 제외)
  - onkeydown : 지정한 요소에서 모든 키가 눌렸을 때 취하는 동작->누르고 있어도 한 번만 실행
  - onkeyup : 키보드에서 손을 뗐을 때 취하는 동작

13. 기타 이벤트
  - onfocus : 요소에 포커스가 갔을 때 취하는 동작
  - onblur : 요소에서 포커스가 빠져 나갔을 때 취하는 동작
  - onchange : 요소의 value 속성 값이 바뀌었을 때 취하는 동작